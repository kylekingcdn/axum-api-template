use tokio::signal;
use tokio::signal::unix::SignalKind;

pub mod api;
pub mod conf;
{%- if db_support %}
pub mod db;
{%- endif %}

pub use conf::Conf;
{%- if db_support %}
pub use db::Database;
{%- endif %}

pub type ShutdownManager = async_shutdown::ShutdownManager<i32>;

#[tokio::main]
async fn main() -> color_eyre::Result<()> {
    color_eyre::install()?;

    let conf = Conf::load()?;

    // init tracing
    let tracing_svc_attrs = tracing_kickstart::ServiceAttributeStore::new(
        env!("CARGO_CRATE_NAME"),
        env!("CARGO_PKG_NAME"),
    );
    tracing_kickstart::dump_crate_vars(&tracing_svc_attrs);
    let tracing_providers = tracing_kickstart::init(tracing_svc_attrs, &conf.tracing)?;

    // log config
    tracing::info!(?conf, "Current config");

    // create graceful shutdown manager
    let shutdown = ShutdownManager::new();
    spawn_interrupt_monitor(shutdown.clone());
    {%- if db_support %}

    // connect to and migrate db
    let db = Database::new_migrated(conf.database.clone()).await?;

    let api_context = api::ApiContext::new(conf.clone(), db);
    {% else %}

    let api_context = api::ApiContext::new(conf.clone());
    {% endif -%}
    let api = api::ApiBuilder::new(api_context).build();
    let api_handle = tokio::spawn(api.serve(shutdown.clone()));

    let res = tokio::join!(api_handle).0;
    if let Err(err) = res {
        tracing::error!("error in handler: {err}");
    }

    let exit_code = shutdown.wait_shutdown_complete().await;
    tracing::info!("Clean shutdown completed");

    // shutdown tracing providers
    tracing::warn!("Shutting down tracing providers: {tracing_providers:?}");
    tracing_providers.shutdown();

    std::process::exit(exit_code);
}

// -- shutdown / signal handling

#[rustfmt::skip]
fn spawn_signal_monitor(kind: SignalKind, name: &'static str, shutdown: ShutdownManager) {
    tokio::spawn({
        async move {
            match signal::unix::signal(kind) {
                Ok(mut signal) => {
                    loop {
                        signal.recv().await;
                        eprintln!("Received interrupt signal: {kind:?} ({name}). Starting graceful shutdown...");
                        shutdown.trigger_shutdown(0).ok();
                    }
                }
                Err(e) => {
                    eprintln!("Failed to initialize signal {kind:?} (name: {name}): {e}");
                    tracing::error!(?kind, ?name, ?e, "Failed to initialize signal");
                }
            }
        }
    });
}

fn spawn_interrupt_monitor(shutdown: ShutdownManager) {
    spawn_signal_monitor(SignalKind::hangup(), "HUP", shutdown.clone());
    spawn_signal_monitor(SignalKind::interrupt(), "INT", shutdown.clone());
    spawn_signal_monitor(SignalKind::terminate(), "TERM", shutdown.clone());
    spawn_signal_monitor(SignalKind::quit(), "QUIT", shutdown);
}
