use aide::axum::ApiRouter;
use aide::openapi::OpenApi;
use axum::body::Bytes;
use axum::extract::MatchedPath;
use axum::http::{HeaderName, HeaderValue, Method, Request, Response};
use axum::{Extension, Router};
use std::io;
use std::sync::Arc;
use std::time::Duration;
use strum::IntoEnumIterator;
use tokio::net::TcpListener;
use tower_http::classify::ServerErrorsFailureClass;
use tower_http::cors;
use tower_http::trace::TraceLayer;
use tracing::Span;

use crate::ShutdownManager;
use route::RouterVersion;

pub mod conf;
pub mod context;
pub mod error;
pub mod response;
pub mod route;

pub use conf::ApiConfig;
pub use context::ApiContext;
pub use error::ApiError;

#[derive(Debug)]
pub struct ApiService {
    router: Router,
    config: ApiConfig,
}
impl ApiService {
    pub async fn serve(self, shutdown: ShutdownManager) -> Result<(), io::Error> {
        tracing::debug!(router=?self.router, "Serving router");

        let listener =
            TcpListener::bind((self.config.listen_host, self.config.listen_port)).await?;

        axum::serve(listener, self.router)
            .with_graceful_shutdown(async move {
                let _ = shutdown.wait_shutdown_triggered().await;
                tracing::debug!("Starting API shutdown");
            })
            .await
    }
}

#[derive(Debug)]
pub struct ApiBuilder {
    context: ApiContext,
}
impl ApiBuilder {
    pub fn new(context: ApiContext) -> Self {
        Self { context }
    }

    fn build_api_router(&self, version: RouterVersion, publish_docs: bool) -> Router {
        let mut api = OpenApi::default();

        // add api routes - openapi.json route is conditionally included based on `publish_docs`
        let mut router = version.to_api_router(publish_docs);

        // build and attach trace layer
        router = self.attach_trace_layer(router);

        // conditionally add routes for docs if expose_docs config var is enabled
        // NOTE: this is done after the trace layer is added to prevent logging docs requests
        if publish_docs {
            tracing::info!("Router will expose OpenAPI docs");
            router = router.merge(version.to_docs_router());
        } else {
            tracing::info!("Not exposing OpenAPI docs");
        }

        router
            // FIXME: call finish_api_with on each version and
            //  layer each returned api instance
            .finish_api_with(&mut api, |t| version.open_api_transform(t))
            .layer(Extension(Arc::new(api)))
            .with_state(self.context.clone())
    }

    pub fn build(self) -> ApiService {
        aide::generate::on_error(|error| {
            println!("OpenAPI generation error: {error}");
        });

        aide::generate::extract_schemas(true);

        let publish_docs = self.context.conf().api.publish_docs;

        // build ApiRouter w/ docs (optionally) for each version and merge
        let mut router = RouterVersion::iter().fold(Router::new(), |router, ver| {
            router.merge(self.build_api_router(ver, publish_docs))
        });

        // add cors layer if enabled - added last to ensure it is included in all routes
        if let Some(cors_layer) = self.build_cors_layer() {
            router = router.layer(cors_layer);
        }

        ApiService {
            config: self.context.conf().api.clone(),
            router,
        }
    }

    fn build_cors_layer(&self) -> Option<cors::CorsLayer> {
        let cors_conf = &self.context.conf().api.cors;
        if !cors_conf.enable {
            return None;
        }

        let mut layer = cors::CorsLayer::default();
        // allow origin
        if let Some(origin) = &cors_conf.allow_origin {
            let allow_origin = match origin.as_str() {
                "*" => cors::AllowOrigin::any(),
                _ => HeaderValue::try_from(origin)
                    .expect("Origin should be a valid header value")
                    .into(),
            };
            layer = layer.allow_origin(allow_origin);
        }
        // allow
        if let Some(headers) = &cors_conf.allow_headers {
            layer = layer.allow_headers(Self::strings_to_header_names(headers));
        }
        if let Some(methods) = &cors_conf.allow_methods {
            layer = layer.allow_methods(Self::strings_to_methods(methods));
        }
        if let Some(allow) = cors_conf.allow_credentials {
            layer = layer.allow_credentials(allow);
        }
        if let Some(headers) = &cors_conf.expose_headers {
            layer = layer.expose_headers(Self::strings_to_header_names(headers));
        }
        Some(layer)
    }

    /// This directly attaches a trace layer to avoid the incredibly ugly associateds generics
    fn attach_trace_layer(&self, router: ApiRouter<ApiContext>) -> ApiRouter<ApiContext> {
        // init trace layer - this is inlined in order to avoid messy generics
        let trace_layer = TraceLayer::new_for_http()
            .make_span_with(|request: &Request<_>| {
                // Log the matched route's path (with placeholders not filled in).
                // Use request.uri() or OriginalUri if you want the real path.
                let matched_path = request
                    .extensions()
                    .get::<MatchedPath>()
                    .map(MatchedPath::as_str);

                tracing::info_span!(
                    "http_request",
                    method = ?request.method(),
                    matched_path,
                    some_other_field = tracing::field::Empty,
                )
            })
            .on_request(|_request: &Request<_>, _span: &Span| {
                // You can use `_span.record("some_other_field", value)` in one of these
                // closures to attach a value to the initially empty field in the info_span
                // created above.
                tracing::debug!(?_request);
            })
            .on_response(
                |_response: &Response<_>, _latency: Duration, _span: &Span| {
                    // tracing::debug!(?_response);
                },
            )
            .on_body_chunk(|_chunk: &Bytes, _latency: Duration, _span: &Span| {
                // tracing::debug!(?_chunk);
            })
            // .on_eos(
            //     |_trailers: Option<&HeaderMap>, _stream_duration: Duration, _span: &Span| {
            //         tracing::error!(?_trailers);
            //     },
            // )
            .on_failure(
                |_error: ServerErrorsFailureClass, _latency: Duration, _span: &Span| {
                    tracing::error!(?_error);
                },
            );

        router.layer(trace_layer)
    }

    fn strings_to_header_names(headers: &[String]) -> Vec<HeaderName> {
        headers
            .iter()
            .map(|h| HeaderName::try_from(h).expect("Should be a valid header"))
            .collect()
    }
    fn strings_to_methods(headers: &[String]) -> Vec<Method> {
        headers
            .iter()
            .map(|h| <Method>::try_from(h.as_str()).expect("Should be a valid method"))
            .collect()
    }
}
