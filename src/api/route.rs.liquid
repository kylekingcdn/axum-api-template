use aide::axum::ApiRouter;
use aide::openapi::Tag;
use aide::transform::TransformOpenApi;
use strum_macros::{Display, EnumIter};

use crate::api::ApiContext;

pub mod v1;

#[derive(Debug, Copy, Clone, Display, EnumIter)]
#[strum(serialize_all = "snake_case")]
pub enum RouterVersion {
    V1,
}
impl RouterVersion {
    /// Returns the api version path prefix
    ///
    /// E.g., for V1: `/api/v1`
    pub fn api_path_component(&self) -> String {
        format!("/api/{self}")
    }

    pub fn to_api_router(&self, publish_openapi_spec: bool) -> ApiRouter<ApiContext> {
        let routes = match self {
            Self::V1 => v1::api_routes(publish_openapi_spec),
        };
        // route under /api/v{version}/...
        let api_path = self.api_path_component();
        ApiRouter::new().nest(&api_path, routes)
    }
    pub fn to_docs_router(&self) -> ApiRouter<ApiContext> {
        let api_path = self.api_path_component();
        let routes = match self {
            Self::V1 => v1::docs_routes(&api_path),
        };
        // route under /docs/v{version}/
        let docs_path = format!("/docs/{self}");
        ApiRouter::new().nest(&docs_path, routes)
    }

    pub fn tags(&self) -> Vec<Tag> {
        match self {
            Self::V1 => v1::tags()
        }
    }

    pub fn open_api_transform<'a>(&self, api: TransformOpenApi<'a>) -> TransformOpenApi<'a> {
        let tags = self.tags();
        match self {
            Self::V1 => v1::docs::open_api_transform(api, tags)
        }
    }
}
