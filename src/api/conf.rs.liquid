use serde::Deserialize;
use serde_with::formats::CommaSeparator;
use serde_with::{StringWithSeparator, serde_as};
use std::net::Ipv4Addr;

#[derive(Debug, Clone, Deserialize)]
pub struct ApiConfig {
    /// Defaults to localhost, set to `0.0.0.0` for any
    #[serde(default = "ApiConfig::listen_host_default")]
    pub listen_host: String,
    #[serde(default = "ApiConfig::listen_port_default")]
    /// Defaults to 8080
    pub listen_port: u16,

    #[serde(default)]
    pub cors: ApiCorsConfig,

    /// enables the publishing of API docs - defaults to true
    #[serde(default = "ApiConfig::publish_docs_default")]
    pub publish_docs: bool, // FIXME: finish impl
}
impl ApiConfig {
    pub fn listen_host_default() -> String {
        Ipv4Addr::LOCALHOST.to_string()
    }
    pub fn listen_port_default() -> u16 {
        8080
    }
    pub fn publish_docs_default() -> bool {
        true
    }
}
impl Default for ApiConfig {
    fn default() -> Self {
        Self {
            listen_host: Self::listen_host_default(),
            listen_port: Self::listen_port_default(),

            cors: Default::default(),

            publish_docs: Self::publish_docs_default(),
        }
    }
}

#[serde_as]
#[derive(Debug, Default, Clone, Deserialize)]
pub struct ApiCorsConfig {
    /// Defaults to false
    #[serde(default)]
    pub enable: bool,

    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[serde_as(as = "Option<StringWithSeparator::<CommaSeparator, String>>")]
    pub allow_origin: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[serde_as(as = "Option<StringWithSeparator::<CommaSeparator, String>>")]
    pub allow_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[serde_as(as = "Option<StringWithSeparator::<CommaSeparator, String>>")]
    pub allow_methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[serde_as(as = "Option<StringWithSeparator::<CommaSeparator, String>>")]
    pub expose_headers: Option<Vec<String>>,
}
